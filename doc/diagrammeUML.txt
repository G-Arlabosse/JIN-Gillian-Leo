@startuml

abstract	Entity{
{field} 	- hp : int
{field}		- levelMediator
{method}	+ recieveDamage(damage)
}

class		Player{
{field} 
{method}
}

abstract	Enemy{
{field} 
{method}
}

class		Corn {
[TODO]
{field} 
{method}
}

class		Milk {
[TODO]
{field} 
{method}
}

class		Carrot{
{field} 
{method}
}

class		Wall{
{field} 
{method}
}

class		WorldManager{
{field} 	- level: std::unique_ptr<LevelManager>
{method}	+ notifyTransition(enum direction)
}

class 		MusicManager{
{field}
{method}	+ playeMusic(musicName)
}

class		GameManager{
{field} 	
{method}	
}

class		LevelManager{
{field} 	- enemies: map<int32_t, enemy>
{field}		- walls: vector<Wall>
{field}		- player: Player
{method}	+ notifyDamage(int32_t, damage)
{method}	+ notifyDeath(int32_t)
}

interface 	LevelMediator{
{method}	+ notifyDamage(int32_t, damage)
{method}	+ notifyDeath(int32_t)
}

interface	WorldMediator{
{method}	+ notifyTransition(enum direction)
}

class		UpdateNotifier{
[NOT IMPLEMENTED]
{field}		- UpdateListeners: vector<tempoListener*>
{method}	+ addUpdateListener(tempoListener*)
{method}	+ notifyTempoUpdate()
{method}	+ notifyUpdate()
}

interface	UpdateListener{
[NOT IMPLEMENTED]
{method}	+ update()
{method}	+ updateTempo()
}

class		Graph{
{field} 
{method}
}

class		Hitbox{
{field} 	- levelMediador
{method}	+ notifyHit(shapeId)
}

class		Hurtbox{
{field} 
{method}
}

class		Projectile{
[TODO]
{field} 	
{method}
}

class		AnimationManager{
{field}		- texture
{method}	+ update(clock)
}

class 		TextureManager{
{field}		- textures : vector<textures>
{method}	+ getTexture(textureName)
{method}	- loadTexture(textureName)
}

class		LevelTransition {
{field}		wall : Wall
}
class 		WorldTransition {

}

abstract 	Health {
{field}		- hp
{field}		- maxHp
{field}		- shapeIndex
{field}		- shield
{method}	+ renderHealthBar(window)
{method}	+ setPosition(position)
{method} 	+ update()
{method}	+ updateDamage(damage)
}


Player ..|> Entity
Enemy ..|> Entity
Corn ..|> Enemy
Milk ..|> Enemy
Carrot ..|> Enemy

GameManager *-- WorldManager
WorldManager *-- LevelManager
WorldManager *-- MusicManager
LevelManager *-- Graph
Entity --> Graph

LevelManager *-- Enemy
LevelManager *-- Player
LevelManager *-- Wall
LevelManager *-- LevelTransition
LevelManager *-- WorldTransition

LevelTransition --> WorldMediator
WorldTransition --> WorldMediator
WorldManager ..|> WorldMediator

Hitbox --> LevelMediator
Health --> LevelMediator
LevelManager ..|> LevelMediator

Entity *-- Hitbox
Projectile *-- Hitbox
Wall *-- Hurtbox
Entity *-- Hurtbox
Entity *-- Health
LevelTransition *-- Wall

Entity *-- AnimationManager
Wall *--> AnimationManager
Projectile *--> AnimationManager

WorldManager *-- TextureManager

' vvv Changer pour un Prototype pattern vvv
Corn *-- Projectile

@enduml